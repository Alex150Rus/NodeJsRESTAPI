/*API - Application Programming Interface - интрефейс приложения (веб, десктоп, мобильное), которое можно использовать
программно - управлять им программно. В случае с веб приложениями, в качестве API ваыступают какие-то конкретные
сервисы/эндпойнты. Чаще всего в качестве API выступает backend. Потому что под управлением приложением обычно
подразумевается управление его серверной частью, потому что она тесно взаимосвязана с клиентской.
Мы достаточно хорошо себя чувстваем на монолитной архитектуре (когда бэкенд полностью рендерит фронтэнд), но рано или поздно
у какого-то большого сервера, помимо веб клиента возникает потребность в мобильных приложениях, десктопных приложениях, у
крупных интернет магазинов может возникнуть потребность выгружать куда-то данные (мелким оптовикам цены и наличие).
Всё это реализуется с помощью API. Здесь не обязательно речь идёт о взаимодействии бэкенда и фронтенда. API может использовать и
другая серверная часть: другой бэкенд (см выше про интернет магазины). Самый распространённый вид API - JSON API
(те API, которые отдают данные в формате JSON и работают по протоколу http), но это далеко не единственный вид API.
Один из старейших API- SOAP (чаще используется BusinesstoBusiness системах). Обычно поставщики (крупные оптовые
интернет магазины) выкатывают API в формате SOAP, но он утарел и сейчас используется достаточно редко, особенно в вебе. Всё-таки
SOAP - это интеграция между двумя серверами. В современных реалиях используется REST API - это одна из вариаций JSON API, но
с некторыми нюансами.
Для того, чтобы какой-то api стал REST API недостаточно, чтобы он возвращал данные в формате JSON. REST API не использует никакого
способа сохранения состояния на сервере (сессии, куки и прочее). Чаще всего в качестве авторизации используются разные варианты
токенной авторизации(OAOS, OAOS2...). Для каких-то простых задач достаточно иметь просто какой-то конкрентый токен.
Токен-это обычно в меру длинная строка-идентификатор, с помощью которого клиентская часть может подписать свой запрос на сервер.

С помощью этого токена клиент показывает, что запрос был выполнен конкретным нормальным авторизованным пользователем.
Два способа создания токена:
1) генерация случайной строки - затратный способ и не подходит для высоконагруженных систем, т.к. для получения токена придётся
постоянно лазать в базу, чтобы понять действительно ли токен был выпущен нашим сервером. Но достаточно безопасный
2) jwt - json web token (предложен компанией auth0) - современный. Это открытый стандарт. Его можно спокойно использовать.
Он шифрует те данные, которые мы хотим в него зашифровать. Это не случайная строка. Это хеш тех данных, которые мы в него положили.
С обычным токеном мы вынуждены каждый раз лазать в базу, а здесь весь пользователь зашифрован с токене (его нужно только расшифровать).

Очень часто в некоторых системах генерируется два токена access token (см пункт1 - он создаётся достаточно мало живущим
бывает и 10и секундный. Это обусловлено вопросами безопасности, чтобы его никто не успел перехватить. Естественно, клиентская часть
должна уметь перевыпускать этот access token и для этого используется refresh token)
 и refresh token (используется, чтобы не заставлять нашего пользователя каждые 10 секунд вводить логин и пароль). Безопасно это?
оба токена обычно лежат в localStorage. А что если их перехватят?

У Анастасии есть access и refresh. Борис спёр access. - Пользуется некоторое время, пока Анастасия не зайдёт и не обновит токен.
Борис спёр два токена. Анастасия снова аторизовывается, получает два новых токена и Борис опят остаётся с носом.
Поэтому для большей безопасности лучше использовать два токена.

В jwt есть две точки - его так можно отличить от обычного токена. Он сотсоит из трёх частей. 1- заголовок с типом шифрования.
2- зашифрованные данные. 3- информация о времени жизни. jwt очень легко расшифровать - на сайте jwt.io))/ Но сервер может проверить он
ли выпустил этот токен - всё благодаря слову 'secret' в коде) Вместо этого слова можно использовать любой приватный ключ.
Но так как токен можно расшифровать - нельзя в него шифровать пароли, e-mail и т.п.

{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImlhdCI6MTU2MDE3NTg3OH0.3UooNYsUSRwotKxVZqmjSSQOndWt541KGuYGEMgIKqk"
}

При отправке на сервер токен кладётся в заголовок Authorization

фронтэнд и бэкенд взаимодействуют между собой посредством ajax запросов. Здесь есть важный момент. Политика безопасности браузеров
запрещает отправлять запросы с разных доментов

допустим, у нас есть основное приложение, которое открывается по домену domain.com и есть api, которая открывается по адресу api.domain.com
И не смотря на то, что это поддомен основного домена - всё равно эта проблема безопасности присутствует, Но на этот счёт есть инструкция.

Существует стандарт CORS. Когда браузер видит, что доменты отличаются - он отправляет preflight запрос методом OPTIONS. Это делается автоматически
Он говорит серверу: "Чувак, хочу тебе запрос отправить. Можно?". И если сервер отвечает заголовком: "Access-Control-Allow-Origin". Это означает, что
отпарвка запроса разрешена. И только после этого браузер отправляет исходный запрос. Т.е. всё зависит от серверной части.
Всё что нам нужно сделать - установить мидлвару cors и прсобачить к нашему app ))
С её помощью мы можем ограничить возможность отправки запросов на наш серевер.

access token не сохраняется в базу, а refresh - сохраняется

*/